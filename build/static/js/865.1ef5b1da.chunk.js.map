{"version":3,"file":"static/js/865.1ef5b1da.chunk.js","mappings":"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","sources":["webpack://berry-material-react-free/./src/views/Update/Update.module.css?bd6e","views/Update/Update.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Update_container__oO-B2\",\"header\":\"Update_header__M8Nk0\",\"section\":\"Update_section__hqd0q\",\"active\":\"Update_active__uNmdU\",\"body\":\"Update_body__3HFwP\",\"detail\":\"Update_detail__Y-FWh\",\"row\":\"Update_row__9WtWX\",\"column\":\"Update_column__CgAsS\",\"chips\":\"Update_chips__xFdnB\",\"new\":\"Update_new__18d+3\",\"chip\":\"Update_chip__xdMGC\"};","/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport InputControl from '../InputControl/InputControl';\r\nimport styles from './Update.module.css';\r\nimport { X } from 'react-feather';\r\nimport Resume from '../Resume/Resume';\r\nimport { contractadd, contractabi } from './../ConnectWallet/contractinfo';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport { ethers } from 'ethers';\r\nimport LiveDisplay from '../LiveDisplay/LiveDisplay';\r\nfunction timeConverter(UNIX_timestamp) {\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    var year = a.getFullYear();\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var timeshow = date + ' ' + month + ' ' + year + ' ';\r\n\r\n    const monthplus = a.getMonth() + 1;\r\n    const getCorrectMonth = monthplus <= 9 ? '0' + monthplus : monthplus;\r\n    const correctDate = date <= 9 ? '0' + date : date;\r\n    const correctHour = hour <= 9 ? '0' + hour : hour;\r\n    const correctMint = min <= 9 ? '0' + min : min;\r\n    var timeforinput = year + '-' + getCorrectMonth + '-' + correctDate;\r\n    return { timeshow, timeforinput };\r\n    // 2018-06-12T19:30\r\n}\r\n\r\nconst Update = () => {\r\n    const { account, active, library } = useWeb3React();\r\n\r\n    const sections = {\r\n        basicInfo: 'Personal Details',\r\n        workExp: 'Employement',\r\n\r\n        education: 'Education',\r\n        achievement: 'Hobbies',\r\n        summary: 'Reference',\r\n        other: 'Others'\r\n    };\r\n\r\n    const [values, setValues] = useState({\r\n        // pers details\r\n        persdetName: '',\r\n        persdetAddress: '',\r\n        persdetEmail: '',\r\n        persdetPhone: '',\r\n\r\n        // work exp\r\n        jobTitle: '',\r\n        companyName: '',\r\n        companyLocation: '',\r\n        companystartDate: '',\r\n        companyendDate: '',\r\n        achvResp: '', // need to look at this one\r\n\r\n        // education\r\n        SchoolorcollegeName: '',\r\n        SchoolorcollegeDesc: '',\r\n        SchoolorcollegestartDate: '',\r\n        SchoolorcollegeEndDate: '',\r\n\r\n        // achievementsBody\r\n        hobbies: '', // need to look at this one\r\n\r\n        summary: '',\r\n\r\n        OtherkeysSkills: '',\r\n        personalStatement: ''\r\n    });\r\n\r\n    console.log(values.SchoolorcollegeDesc);\r\n\r\n    const [UserData, setUserData] = useState('');\r\n    const [DataMessage, setDataMessage] = useState({\r\n        exists: false,\r\n        message: 'Loading'\r\n    });\r\n\r\n    const GetDisplayData = async () => {\r\n        const signer = await library?.getSigner(account);\r\n        const cont = await new ethers.Contract(contractadd, contractabi, signer);\r\n\r\n        const displayCv = await cont.displayCv();\r\n        console.log({ displayCv });\r\n\r\n        const checkpersdetAddress = displayCv[0][1];\r\n\r\n        if (checkpersdetAddress == account) {\r\n            const PersDetails = {\r\n                persdetName: displayCv[0][0]?.toString(),\r\n                persdetAddress: displayCv[0][1]?.toString(),\r\n                persdetEmail: displayCv[0][2]?.toString(),\r\n                persdetPhone: displayCv[0][3]?.toString(),\r\n                personalStatement: displayCv[0][4]?.toString(),\r\n                OtherkeysSkills: displayCv[0][5]?.toString(),\r\n                hobbies: displayCv[0][6]?.toString(),\r\n                summary: displayCv[0][7]?.toString()\r\n            };\r\n\r\n            const Empstartdata = timeConverter(displayCv[1][3]?.toString()).timeforinput;\r\n            const Empenddate = timeConverter(displayCv[1][3]?.toString()).timeforinput;\r\n\r\n            const Employement = {\r\n                jobTitle: displayCv[1][0]?.toString(),\r\n                companyName: displayCv[1][1]?.toString(),\r\n                companyLocation: displayCv[1][2]?.toString(),\r\n                companystartDate: Empstartdata?.toString(),\r\n                companyendDate: Empenddate?.toString(),\r\n                achvResp: displayCv[1][5]?.toString()\r\n            };\r\n\r\n            const Edustartdata = timeConverter(displayCv[2][1]?.toString()).timeforinput;\r\n            const Eduenddate = timeConverter(displayCv[2][2]?.toString()).timeforinput;\r\n\r\n            const Education = {\r\n                SchoolorcollegeName: displayCv[2][0]?.toString(),\r\n                SchoolorcollegestartDate: Edustartdata?.toString(),\r\n                SchoolorcollegeEndDate: Eduenddate?.toString(),\r\n                SchoolorcollegeDesc: displayCv[2][3]?.toString()\r\n            };\r\n\r\n            setValues({ ...PersDetails, ...Employement, ...Education });\r\n            // persdetName: displayCv[0][0],\r\n            // persdetAddress: displayCv[0][1],\r\n            // persdetEmail: displayCv[0][2],\r\n            // persdetPhone: displayCv[0][3],\r\n            // personalStatement: displayCv[0][4],\r\n            // OtherkeysSkills: displayCv[0][5],\r\n            // hobbies: displayCv[0][6],\r\n            // summary: displayCv[0][7],\r\n\r\n            // jobTitle: displayCv[1][0],\r\n            // companyName: displayCv[1][1],\r\n            // companyLocation: displayCv[1][2],\r\n            // companystartDate: displayCv[1][3]?.toString(),\r\n            // companyendDate: displayCv[1][4]?.toString(),\r\n            // achievements: displayCv[1][5],\r\n\r\n            // SchoolorcollegeName: displayCv[2][0],\r\n            // SchoolorcollegestartDate: displayCv[2][1]?.toString(),\r\n            // SchoolorcollegeEndDate: displayCv[2][2]?.toString(),\r\n            // SchoolorcollegeDesc: displayCv[2][3],\r\n\r\n            // setUserData({ PersDetails, Employement, Education });\r\n            setDataMessage({ exists: true, message: 'Data Exists' });\r\n        } else {\r\n            setDataMessage({ exists: false, message: 'Data does not Exist' });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (active && account) {\r\n            GetDisplayData();\r\n        } else {\r\n            setDataMessage({ exists: false, message: 'Connect your wallet' });\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (active && account) {\r\n            GetDisplayData();\r\n        } else {\r\n            setDataMessage({ exists: false, message: 'Connect your wallet' });\r\n        }\r\n    }, [account]);\r\n\r\n    console.log(values);\r\n\r\n    const [activeSectionIndex, setActiveSectionIndex] = useState(0);\r\n    const [activeSectionKey, setActiveSectionKey] = useState(Object.keys(sections)[0]);\r\n\r\n    const nextSection = () => {\r\n        let sec = activeSectionIndex + 1;\r\n        setActiveSectionKey(Object.keys(sections)[sec]);\r\n        setSectionTitle(Object.keys(sections)[sec]);\r\n        setActiveSectionIndex(sec);\r\n    };\r\n\r\n    const [sectionTitle, setSectionTitle] = useState(sections[Object.keys(sections)[0]]);\r\n\r\n    const handlePointUpdate = (value, index) => {\r\n        const tempValues = { ...values };\r\n        if (!Array.isArray(tempValues.points)) tempValues.points = [];\r\n        tempValues.points[index] = value;\r\n        setValues(tempValues);\r\n    };\r\n\r\n    const handleSubmission = async () => {\r\n        console.log({ values });\r\n\r\n        !active && alert('Connect wallet');\r\n\r\n        const signer = await library?.getSigner(account);\r\n        const cont = await new ethers.Contract(contractadd, contractabi, signer);\r\n        console.log({ cont });\r\n\r\n        const {\r\n            persdetName,\r\n            persdetAddress,\r\n            persdetEmail,\r\n            persdetPhone,\r\n            jobTitle,\r\n            companyName,\r\n            companyLocation,\r\n            companystartDate,\r\n            companyendDate,\r\n            achvResp, // need to look at this one\r\n            SchoolorcollegeName,\r\n            SchoolorcollegeDesc,\r\n            SchoolorcollegestartDate,\r\n            SchoolorcollegeEndDate,\r\n            hobbies, // need to look at this one\r\n            summary,\r\n            OtherkeysSkills,\r\n            personalStatement\r\n        } = values;\r\n\r\n        const companystartDateUnix = Math.round(new Date(companystartDate).getTime() / 1000).toString();\r\n        const companyendDateUnix = Math.round(new Date(companyendDate).getTime() / 1000).toString();\r\n\r\n        const SchoolorcollegestartDateUnix = Math.round(new Date(SchoolorcollegestartDate).getTime() / 1000).toString();\r\n        const SchoolorcollegeEndDateUnix = Math.round(new Date(SchoolorcollegeEndDate).getTime() / 1000).toString();\r\n\r\n        console.log({ companystartDateUnix });\r\n        // const PersDetails = [\r\n        //   persdetName,\r\n        //   account,\r\n        //   persdetEmail,\r\n        //   personalStatement,\r\n        //   OtherkeysSkills,\r\n        //   hobbies,\r\n        //   summary,\r\n        // ];\r\n        // const Employement = [\r\n        //   jobTitle,\r\n        //   companyName,\r\n        //   companyLocation,\r\n        //   companystartDateUnix,\r\n        //   companyendDateUnix,\r\n        //   achvResp,\r\n        // ];\r\n        // const Education = [\r\n        //   SchoolorcollegeName,\r\n        //   SchoolorcollegestartDateUnix,\r\n        //   SchoolorcollegeEndDateUnix,\r\n        //   SchoolorcollegeDesc,\r\n        // ];\r\n\r\n        const PersDetails = [persdetName, account, persdetEmail, persdetPhone, personalStatement, OtherkeysSkills, hobbies, summary];\r\n        const Employement = [jobTitle, companyName, companyLocation, companystartDateUnix, companyendDateUnix, achvResp];\r\n        const Education = [SchoolorcollegeName, SchoolorcollegestartDateUnix, SchoolorcollegeEndDateUnix, SchoolorcollegeDesc];\r\n\r\n        console.log({ PersDetails, Employement, Education });\r\n\r\n        console.log(values.SchoolorcollegeDesc);\r\n\r\n        const createCall = await cont.inputCvDet(PersDetails, Employement, Education);\r\n        await createCall.wait();\r\n    };\r\n\r\n    // forms\r\n    const basicInfoBody = (\r\n        <div className={styles.detail}>\r\n            <div className={styles.row}>\r\n                <InputControl\r\n                    label=\"Name\"\r\n                    placeholder=\"Enter your full\"\r\n                    value={values.persdetName}\r\n                    onChange={(event) => {\r\n                        setValues((prev) => ({ ...prev, persdetName: event.target.value }));\r\n                    }}\r\n                />\r\n                <InputControl\r\n                    label=\"Address\"\r\n                    value={values.persdetAddress}\r\n                    placeholder=\"\"\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            persdetAddress: event.target.value\r\n                        }))\r\n                    }\r\n                    disabled\r\n                />\r\n            </div>\r\n\r\n            <div className={styles.row}>\r\n                <InputControl\r\n                    label=\"Email\"\r\n                    value={values.persdetEmail}\r\n                    placeholder=\"Enter your email\"\r\n                    onChange={(event) => setValues((prev) => ({ ...prev, persdetEmail: event.target.value }))}\r\n                />\r\n                <InputControl\r\n                    label=\"Enter phone\"\r\n                    value={values.persdetPhone}\r\n                    placeholder=\"Enter your phone number\"\r\n                    onChange={(event) => setValues((prev) => ({ ...prev, persdetPhone: event.target.value }))}\r\n                />\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-evenly',\r\n                    alignItems: 'left'\r\n                }}\r\n            >\r\n                <button type=\"button\" onClick={nextSection}>\r\n                    next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const workExpBody = (\r\n        <div className={styles.detail}>\r\n            <div className={styles.row}>\r\n                <InputControl\r\n                    label=\"Job Title\"\r\n                    placeholder=\"Enter job title \"\r\n                    value={values.jobTitle}\r\n                    onChange={(event) => setValues((prev) => ({ ...prev, jobTitle: event.target.value }))}\r\n                />\r\n                <InputControl\r\n                    label=\"Company Name\"\r\n                    placeholder=\"Enter company name\"\r\n                    value={values.companyName}\r\n                    onChange={(event) => setValues((prev) => ({ ...prev, companyName: event.target.value }))}\r\n                />\r\n            </div>\r\n\r\n            <div className={styles.row}>\r\n                <InputControl\r\n                    label=\"Location\"\r\n                    placeholder=\"Enter company location\"\r\n                    value={values.companyLocation}\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            companyLocation: event.target.value\r\n                        }))\r\n                    }\r\n                />\r\n            </div>\r\n            {console.log(values.companystartDate)}\r\n            <div className={styles.row}>\r\n                <InputControl\r\n                    label=\"Start Date\"\r\n                    type=\"date\"\r\n                    placeholder=\"Enter start date of work\"\r\n                    value={values.companystartDate}\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            companystartDate: event.target.value\r\n                        }))\r\n                    }\r\n                />\r\n                <InputControl\r\n                    label=\"End Date\"\r\n                    type=\"date\"\r\n                    placeholder=\"Enter end date of work\"\r\n                    value={values.companyendDate}\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            companyendDate: event.target.value\r\n                        }))\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div className={styles.column}>\r\n                <label>Achievements and Responsibilities</label>\r\n                <InputControl\r\n                    placeholder=\"Describe your achievements and responsibilities\"\r\n                    value={values.achvResp}\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            achvResp: event.target.value\r\n                        }))\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-evenly',\r\n                    alignItems: 'left'\r\n                }}\r\n            >\r\n                <button type=\"button\" onClick={nextSection}>\r\n                    next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const educationBody = (\r\n        <div className={styles.detail}>\r\n            <div className={styles.row}>\r\n                {/* <InputControl\r\n              label=\"Description\"\r\n              value={values.title}\r\n              placeholder=\"Enter description\"\r\n              onChange={(event) =>\r\n                setValues((prev) => ({ ...prev, title: event.target.value }))\r\n              }\r\n            /> */}\r\n                <InputControl\r\n                    label=\"College/School Name\"\r\n                    value={values.SchoolorcollegeName}\r\n                    placeholder=\"Enter college/school name\"\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            SchoolorcollegeName: event.target.value\r\n                        }))\r\n                    }\r\n                />\r\n            </div>\r\n            <InputControl\r\n                label=\"Description\"\r\n                value={values.SchoolorcollegeDesc}\r\n                placeholder=\"Enter description\"\r\n                onChange={(event) =>\r\n                    setValues((prev) => ({\r\n                        ...prev,\r\n                        SchoolorcollegeDesc: event.target.value\r\n                    }))\r\n                }\r\n            />\r\n\r\n            {/* <InputControl\r\n            label=\"College/School Name\"\r\n            value={values.college}\r\n            placeholder=\"Enter college/school name\"\r\n            onChange={(event) =>\r\n              setValues((prev) => ({ ...prev, college: event.target.value }))\r\n            }\r\n          /> */}\r\n            <div className={styles.row}>\r\n                <InputControl\r\n                    label=\"Start Date\"\r\n                    type=\"date\"\r\n                    placeholder=\"Enter start date of this education\"\r\n                    value={values.SchoolorcollegestartDate}\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            SchoolorcollegestartDate: event.target.value\r\n                        }))\r\n                    }\r\n                />\r\n                <InputControl\r\n                    label=\"End Date\"\r\n                    type=\"date\"\r\n                    placeholder=\"Enter end date of this education\"\r\n                    value={values.SchoolorcollegeEndDate}\r\n                    onChange={(event) =>\r\n                        setValues((prev) => ({\r\n                            ...prev,\r\n                            SchoolorcollegeEndDate: event.target.value\r\n                        }))\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-evenly',\r\n                    alignItems: 'left'\r\n                }}\r\n            >\r\n                <button type=\"button\" onClick={nextSection}>\r\n                    next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const achievementsBody = (\r\n        <div className={styles.detail}>\r\n            <div className={styles.column}>\r\n                <label> Your Hobbies</label>\r\n                <InputControl\r\n                    placeholder=\"Enter Your Hobbies\"\r\n                    value={values.hobbies}\r\n                    onChange={(event) => setValues((prev) => ({ ...prev, hobbies: event.target.value }))}\r\n                />\r\n            </div>\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-evenly',\r\n                    alignItems: 'left'\r\n                }}\r\n            >\r\n                <button type=\"button\" onClick={nextSection}>\r\n                    next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const summaryBody = (\r\n        <div className={styles.detail}>\r\n            <InputControl\r\n                label=\"Summary\"\r\n                value={values.summary}\r\n                placeholder=\"Enter your Reference\"\r\n                onChange={(event) => setValues((prev) => ({ ...prev, summary: event.target.value }))}\r\n            />\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-evenly',\r\n                    alignItems: 'left'\r\n                }}\r\n            >\r\n                <button type=\"button\" onClick={nextSection}>\r\n                    next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const otherBody = (\r\n        <div className={styles.detail}>\r\n            <InputControl\r\n                label=\"Key Skills\"\r\n                value={values.OtherkeysSkills}\r\n                placeholder=\"Enter key skills\"\r\n                onChange={(event) =>\r\n                    setValues((prev) => ({\r\n                        ...prev,\r\n                        OtherkeysSkills: event.target.value\r\n                    }))\r\n                }\r\n            />\r\n            <InputControl\r\n                label=\"Personal Statement\"\r\n                value={values.personalStatement}\r\n                placeholder=\"Enter personal statement\"\r\n                onChange={(event) =>\r\n                    setValues((prev) => ({\r\n                        ...prev,\r\n                        personalStatement: event.target.value\r\n                    }))\r\n                }\r\n            />\r\n\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-evenly',\r\n                    alignItems: 'left'\r\n                }}\r\n            >\r\n                <button type=\"button\" onClick={handleSubmission}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const generateBody = () => {\r\n        switch (sections[activeSectionKey]) {\r\n            case sections.basicInfo:\r\n                return basicInfoBody;\r\n            case sections.workExp:\r\n                return workExpBody;\r\n\r\n            case sections.education:\r\n                return educationBody;\r\n            case sections.achievement:\r\n                return achievementsBody;\r\n            case sections.summary:\r\n                return summaryBody;\r\n            case sections.other:\r\n                return otherBody;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const resumeRef = useRef();\r\n\r\n    const [resumeInformation, setResumeInformation] = useState({\r\n        [sections.basicInfo]: {\r\n            id: sections.basicInfo,\r\n            sectionTitle: sections.basicInfo,\r\n            detail: {}\r\n        },\r\n        [sections.workExp]: {\r\n            id: sections.workExp,\r\n            sectionTitle: sections.workExp,\r\n            details: []\r\n        },\r\n        // [sections.project]: {\r\n        //   id: sections.project,\r\n        //   sectionTitle: sections.project,\r\n        //   details: [],\r\n        // },\r\n        [sections.education]: {\r\n            id: sections.education,\r\n            sectionTitle: sections.education,\r\n            details: []\r\n        },\r\n        [sections.achievement]: {\r\n            id: sections.achievement,\r\n            sectionTitle: sections.achievement,\r\n            points: []\r\n        },\r\n        [sections.summary]: {\r\n            id: sections.summary,\r\n            sectionTitle: sections.summary,\r\n            detail: ''\r\n        },\r\n        [sections.other]: {\r\n            id: sections.other,\r\n            sectionTitle: sections.other,\r\n            detail: ''\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-xl-6\">\r\n                        <div className={`border rounded ${styles.container}`}>\r\n                            <div className={styles.header}>\r\n                                {Object.keys(sections)?.map((key, index) => (\r\n                                    <div\r\n                                        className={`${styles.section} ${activeSectionKey === key ? styles.active : ''}`}\r\n                                        key={key}\r\n                                        onClick={() => {\r\n                                            setActiveSectionKey(key);\r\n                                            setSectionTitle(key);\r\n                                            setActiveSectionIndex(index);\r\n                                        }}\r\n                                    >\r\n                                        {sections[key]}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n\r\n                            <div className={styles.body}>\r\n                                <InputControl\r\n                                    label=\"Section\"\r\n                                    placeholder=\"Enter section title\"\r\n                                    value={sectionTitle}\r\n                                    onChange={(event) => setSectionTitle(event.target.value)}\r\n                                    disabled\r\n                                />\r\n\r\n                                {/* <div className={styles.chips}>\r\n            {activeInformation?.details\r\n              ? activeInformation?.details?.map((item, index) => (\r\n                  <div\r\n                    className={`${styles.chip} ${\r\n                      activeDetailIndex === index ? styles.active : \"\"\r\n                    }`}\r\n                    key={item.title + index}\r\n                    onClick={() => setActiveDetailIndex(index)}\r\n                  >\r\n                    <p>\r\n                      {sections[activeSectionKey]} {index + 1}\r\n                    </p>\r\n                    <X\r\n                      onClick={(event) => {\r\n                        event.stopPropagation();\r\n                        handleDeleteDetail(index);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                ))\r\n              : \"\"}\r\n          </div> */}\r\n\r\n                                {generateBody()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-xl-6\">\r\n                        <LiveDisplay values={values} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Update;\r\n"],"names":["timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","date","getDate","timeshow","getHours","getMinutes","getSeconds","monthplus","timeforinput","account","active","library","useWeb3React","sections","basicInfo","workExp","education","achievement","summary","other","values","setValues","useState","persdetName","persdetAddress","persdetEmail","persdetPhone","jobTitle","companyName","companyLocation","companystartDate","companyendDate","achvResp","SchoolorcollegeName","SchoolorcollegeDesc","SchoolorcollegestartDate","SchoolorcollegeEndDate","hobbies","OtherkeysSkills","personalStatement","console","log","UserData","setUserData","DataMessage","setDataMessage","exists","message","GetDisplayData","async","signer","getSigner","cont","ethers","contractadd","contractabi","displayCv","PersDetails","toString","Empstartdata","Empenddate","Employement","Edustartdata","Eduenddate","Education","useEffect","activeSectionIndex","setActiveSectionIndex","activeSectionKey","setActiveSectionKey","Object","keys","nextSection","sec","setSectionTitle","sectionTitle","basicInfoBody","className","styles","InputControl","label","placeholder","value","onChange","event","prev","target","disabled","style","display","justifyContent","alignItems","type","onClick","workExpBody","educationBody","achievementsBody","summaryBody","otherBody","alert","companystartDateUnix","Math","round","getTime","companyendDateUnix","SchoolorcollegestartDateUnix","SchoolorcollegeEndDateUnix","createCall","inputCvDet","wait","resumeInformation","setResumeInformation","useRef","id","detail","details","points","map","key","index","generateBody","LiveDisplay"],"sourceRoot":""}